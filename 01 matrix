class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>> const &m) {
        std::vector<std::vector<int>> dst(m.size(), vector<int>(m[0].size(), -1));
        std::queue<std::pair<int, int>> q;
        
        for (int i = 0; i < m.size(); ++i) {
            for (int j = 0; j < m[0].size(); ++j) {
                if (0 == m[i][j]) {
                    dst[i][j] = 0;
                    q.push({i, j});
                }
            }
        }
        
        while (!q.empty()) {
            auto const [i, j] = q.front();
            q.pop();

            if (auto const x = i - 1; x >= 0 && dst[x][j] < 0) {
                dst[x][j] = dst[i][j] + 1;
                q.push({x, j});
            }

            if (auto const x = i + 1; x <= dst.size() - 1 && dst[x][j] < 0) {
                dst[x][j] = dst[i][j] + 1;
                q.push({x, j});
            }

            if (auto const y = j - 1; y >= 0 && dst[i][y] < 0) {
                dst[i][y] = dst[i][j] + 1;
                q.push({i, y});
            }

            if (auto const y = j + 1; y <= dst[0].size() - 1 && dst[i][y] < 0) {
                dst[i][y] = dst[i][j] + 1;
                q.push({i, y});
            }
        }

        return dst;
    }
};
