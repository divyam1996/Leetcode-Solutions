class Solution {
public:
    //return the length of sequence starting with "start" 
    //and consecutive elements having difference = diff
    int getLenWithDiff(vector<int>&nums, int start, int diff)
    {
        int ans = 1;
        int prev = nums[start];
        for (int i = start + 1; i < nums.size(); i++)
        {
            if(nums[i] - prev == diff) 
            {
                prev = nums[i]; 
                ans++; 
            }
        }
        return ans;
    }
    int longestArithSeqLength(vector<int>& nums)
    {
        int n = nums.size(), ans = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                //fixing the initial two elements of sequence at i and j
                int len = 1 + getLenWithDiff(nums, j, nums[j] - nums[i]);
                ans = max(ans, len);
            }
        }
        return ans;
    }
};
getLenWithDiff = O(N)
so total complexity = O((N ^ 2) * N) = O(N ^ 3)
We need to trim it down to O(N^2)
for that we would need to make "getLenWithDiff" have a complexity of O(1)
Can we do that?????
//======================================================================================================================

DYNAMIC PROGRAMMING [ACCEPTED]
For any "i, j" pair we need answer for best len starting from "j" having diff "nums[j] - nums[i]"
For the left "i, j" pairs we need answers from "right" part of array
So we can start from the right and move towards left (while making "i, j" pairs)

class Solution {
public:
    int longestArithSeqLength(vector<int>& nums)
    {
        int n = nums.size(), ans = 0;
        vector<unordered_map<int, int>>mp(n);
        for (int i = n - 1; i >= 0; i--)
        {
            //if we go from (j = 0 to i) then we have to take "mp[i][diff] = max(mp[i][diff], 1 + x)"
            //as there might me be case of same start and same diff but "diff" j's
            //so j = n - 1 would have less length than j < n -1
            for (int j = n - 1; j > i; j--)
            {
                int diff = nums[j] - nums[i];
                int nextLen;
                if (!mp[j].count(diff)) nextLen = 1;
                else nextLen = mp[j][diff];
                
                //overriding if {i, diff} pair is same as smaller j will have greater len always
                mp[i][diff] = 1 + nextLen; 
                ans = max(ans, 1 + nextLen);
            }
        }
        return ans;
    }
};
