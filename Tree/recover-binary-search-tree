/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        
        TreeNode* curr = root;
        
        stack<TreeNode*> s;
        
        TreeNode *x = NULL;
        TreeNode* y = NULL;
        
        TreeNode* prev = new TreeNode(INT_MIN);
        
        while(curr || !s.empty()){
            if(curr){
                s.push(curr);
                curr = curr->left;
            }
            else{
                curr = s.top();
                s.pop();
                if(prev->val > curr->val){
                    if(x == NULL)
                        x = prev;
                    if(x!= NULL)
                        y = curr;
                }
                prev = curr;
                curr = curr->right;
            }
        }
        
        int temp = x->val;
        x->val = y->val;
        y->val = temp;
        
    }
};



///////////////////////////solution 2 with recursion no stack 
class Solution {
public:
    TreeNode *prev=NULL,*first=NULL,*second=NULL;
    void solve(TreeNode *root)
    {
        if(root==NULL)
        {
            return;
        }
        solve(root->left);
        if(prev!=NULL && root->val<prev->val)
        {
            if(first==NULL)
            {
                first=prev;
            }
            second=root;
        }
        prev=root;
        solve(root->right);
            
    }
    void recoverTree(TreeNode* root) {
        solve(root);
        swap(first->val,second->val);
        
        
        
    }
};
