class Solution {
public:
    int numFactoredBinaryTrees(vector<int>& arr) {
        
        int n = arr.size();
        sort(arr.begin(),arr.end());

       
        unordered_map<int,long long>dp;
        long long count = 1;
        int MOD = 1000000007;
        for(int i=0;i<n;i++){
        dp.insert({arr[i],1});
        }
        //dp[arr[0]]=1;
        for(int i=1;i<n;i++)
        {
            dp[arr[i]] = 1;    
            
            for(int j=0;j<i;j++)
            {
                if((arr[i] % arr[j]) == 0)
                {
                   
                    if(dp.find(arr[i]/arr[j])!=dp.end())
                        dp[arr[i]] =  (dp[arr[i]] + dp[arr[j]] * dp[arr[i]/arr[j]]) % MOD;
                }                
            }
            
            count = (count + dp[arr[i]]) % MOD;
        }
        
        return count;   
    }
};
