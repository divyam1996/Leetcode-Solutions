//dfs approach 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans=0;
    int ht;
    int height(TreeNode* root)
    {
        if(!root) return 0;
         int l=height(root->left);
        int r=height(root->right);
        
        return max(l,r)+1;
    }
    void cal(TreeNode* root,int lev)
    {
        if(!root) return;
        
        if(lev==ht)
        {
            ans+=root->val;
            return;
        }
        cal(root->left,lev+1);
        cal(root->right,lev+1);
    }
    int deepestLeavesSum(TreeNode* root,int l=0) {
        ht=height(root);
        cal(root,1);
        return ans;
    }
};
